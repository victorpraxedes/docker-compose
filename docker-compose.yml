version: '2.1'
services:

  # certs:
  #   image: nginx
  #   restart: always
  #   depends_on:
  #     - apigw
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - /etc/letsencrypt:/certs
  #     - ./certs/default.conf:/etc/nginx/conf.d/default.conf

  history:
    image: dojot/history:0.3.0-nightly20180607
    restart: always
    depends_on:
      - mongodb
    environment:
      FALCON_SETTINGS_MODULE: 'history.settings.docker'
    logging:
      driver: json-file
      options:
        max-size: 100m

  persister:
    image: dojot/persister:0.3.0-nightly20180607
    restart: always
    depends_on:
      - mongodb
      - auth
      - kafka
      - data-broker
    environment:
      FALCON_SETTINGS_MODULE: 'history.settings.docker'
    logging:
      driver: json-file
      options:
        max-size: 100m

  mongodb:
    image: "mongo:3.2"
    restart: always
    user: "mongodb"
    logging:
      driver: json-file
      options:
        max-size: 100m

  mosca-redis:
    image: redis:alpine
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m

  iotagent-mqtt:
    image: dojot/iotagent-mosca:0.3.0-nightly20180607
    depends_on:
      - mosca-redis
      - kafka
      - data-broker
      - auth
    ports:
      - 1883:1883
      - 8883:8883
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m

  gui:
    image: dojot/gui:0.3.0-nightly20180607
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m

  # orion replacement component
  data-broker:
    image: dojot/data-broker:0.3.0-nightly20180607
    restart: always
    depends_on:
      - kafka
      - data-broker-redis
    logging:
      driver: json-file
      options:
        max-size: 100m

  data-broker-redis:
    image: redis:alpine
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m

  device-manager-redis:
    image: redis:alpine
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m

  device-manager:
    image: dojot/device-manager:0.3.0-nightly20180607
    restart: always
    environment:
      # TODO: Fill these env variables with suitable values
      - DEV_MNGR_CRYPTO_PASS="kamehameHA"
      - DEV_MNGR_CRYPTO_IV=1234567890123456
      - DEV_MNGR_CRYPTO_SALT="shuriken"
    depends_on:
      - postgres
      - kafka
      - data-broker
      - device-manager-redis
    logging:
      driver: json-file
      options:
        max-size: 100m

  image-manager:
    image: dojot/image-manager:0.3.0-nightly20180607
    restart: always
    depends_on:
      - postgres
      - minio
    logging:
      driver: json-file
      options:
        max-size: 100m
    environment:
      # TODO: The following should be unique for each environment
      S3ACCESSKEY: 9HEODSF6WQN5EZ39DM7Z
      S3SECRETKEY: fT5nAgHR9pkj0yYsBdc4p+PPq6ArjshcPdz0HA6W

  minio:
    image:
    restart: always
    image: "minio/minio"
    logging:
      driver: json-file
      options:
        max-size: 100m
    environment:
      # TODO: The following should be unique for each environment
      MINIO_ACCESS_KEY: 9HEODSF6WQN5EZ39DM7Z
      MINIO_SECRET_KEY: fT5nAgHR9pkj0yYsBdc4p+PPq6ArjshcPdz0HA6W
    command: server /data

  auth-redis:
    image: redis:alpine
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m

  auth:
    image: dojot/auth:0.3.0-nightly20180607
    restart: always
    depends_on:
      - apigw
      - postgres
      - auth-redis
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      AUTH_DB_HOST: "postgres"
      AUTH_DB_USER: "kong"
      AUTH_KONG_URL: "http://apigw:8001"
      AUTH_CACHE_HOST: "auth-redis"
      # This is used to select the type of cache to be used. Allowed values are
      # "redis" or "nocache"
      AUTH_CACHE_NAME: "redis"
    logging:
      driver: json-file
      options:
        max-size: 100m

  postgres:
    image: "postgres:9.4-alpine"
    restart: always
    environment:
      POSTGRES_USER: "kong"
      POSTGRES_DB: "kong"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: json-file
      options:
        max-size: 100m

  kong-migration:
    image: dojot/kong:0.3.0-nightly20180607
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=postgres
    command: kong migrations up
    restart: on-failure

  apigw:
    image: dojot/kong:0.3.0-nightly20180607
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      kong-migration:
        condition: service_started
    ports:
      - "8000:8000"
    environment:
      KONG_DATABASE: "postgres"
      KONG_PG_HOST: "postgres"
    volumes:
      - ./apigw/plugins/pep-kong:/plugins/pep-kong:Z
      - ./apigw/plugins/mutualauthentication:/plugins/mutualauthentication:Z
    logging:
      driver: json-file
      options:
        max-size: 100m

  kong-config:
    image: appropriate/curl
    entrypoint: /opt/kong.config.sh
    restart: on-failure
    depends_on:
      - apigw
    volumes:
      - ./kong.config.sh:/opt/kong.config.sh:Z

  flowbroker:
    image: dojot/flowbroker:0.3.0-nightly20180607
    restart: always
    depends_on:
      - rabbitmq
      - kafka
      - mongodb
      - auth
    networks:
      - default
      - flowbroker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:Z

  rabbitmq:
    image: rabbitmq:3.7-alpine
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m

  alarm-manager:
    image: dojot/alarm-manager:0.3.0-nightly20180607
    restart: always
    depends_on:
      - mongodb
      - rabbitmq
    environment:
      - MONGO_HOST=mongodb
      - RABBIT_HOST=rabbitmq
    volumes:
      - ./alarms:/opt/jboss/dojot/alarms/metamodel:Z
    logging:
      driver: json-file
      options:
        max-size: 100m

  docker-monitor:
    image: dojot/docker-monitor:0.3.0-nightly20180607
    restart: always
    depends_on:
      - rabbitmq
      - alarm-manager
    environment:
      - RABBITMQ_HOST=rabbitmq
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    logging:
      driver: json-file
      options:
        max-size: 100m

  zookeeper:
    image: "zookeeper:3.4"
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m

  kafka:
    image: "ches/kafka:0.10.1.1"
    depends_on:
      - zookeeper
    restart: always
    environment:
      ZOOKEEPER_IP: zookeeper
      KAFKA_NUM_PARTITIONS: 10
    logging:
      driver: json-file
      options:
        max-size: 100m

###
# Currently this is only needed if MQTT over TLS is used.
###
#
#  ejbca:
#    image: "dojot/ejbca"
#    restart: always
#    logging:
#      driver: json-file
#      options:
#        max-size: 100m

###
# If mutual authentication is needed, please uncomment these three components
# below
###
#
#  ma-redis:
#    image: "redis:3.2.8"
#    volumes:
#      - ./ma/redis.conf:/usr/local/etc/redis/redis.conf
#      - ./ma/sentinel.conf:/usr/local/etc/redis/sentinel.conf
#      - ./ma/redis_init.sh:/usr/local/etc/redis/redis_init.sh
#    command: sh -c "chmod +x /usr/local/etc/redis/redis_init.sh &&
#    /usr/local/etc/redis/redis_init.sh"
#    logging:
#      driver: json-file
#      options:
#        max-size: 100m
#
#  kerberos:
#    image: "dojot/kerberos:latest"
#    depends_on:
#      - kafka
#      - ma-redis
#    environment:
#      REDIS_ADDRESS: ma-redis
#    logging:
#      driver: json-file
#      options:
#        max-size: 100m
#
#  kong-ma-config:
#    image: appropriate/curl
#    entrypoint: /opt/kong-ma.config.sh
#    restart: on-failure
#    depends_on:
#      - apigw
#      - kong-config
#    volumes:
#      - ./ma/kong-ma.config.sh:/opt/kong-ma.config.sh:Z

networks:
  flowbroker:
